From 0fa0fcd1c05a1b08214f7ff1a51ee8362186ed03 Mon Sep 17 00:00:00 2001
From: Nicholas Skehin <ns476@cam.ac.uk>
Date: Tue, 12 Oct 2010 13:51:31 +0100
Subject: [PATCH] Implement mocking for SMS and MMS

Change-Id: I8925f94fcce6ce3b9be44639e29832dcb352ced0
---
 .../android/providers/telephony/MmsProvider.java   |   55 +++++++++--
 .../providers/telephony/MmsSmsDatabaseHelper.java  |   18 +++-
 .../providers/telephony/MmsSmsProvider.java        |  105 +++++++++++++++++--
 .../android/providers/telephony/SmsProvider.java   |   29 +++++-
 4 files changed, 185 insertions(+), 22 deletions(-)

diff --git a/src/com/android/providers/telephony/MmsProvider.java b/src/com/android/providers/telephony/MmsProvider.java
index a4e6919..26c1bd8 100644
--- a/src/com/android/providers/telephony/MmsProvider.java
+++ b/src/com/android/providers/telephony/MmsProvider.java
@@ -21,6 +21,7 @@ import android.content.ContentValues;
 import android.content.Context;
 import android.content.Intent;
 import android.content.UriMatcher;
+import android.content.pm.PackageManager;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
@@ -60,7 +61,8 @@ public class MmsProvider extends ContentProvider {
 
     @Override
     public boolean onCreate() {
-        mOpenHelper = MmsSmsDatabaseHelper.getInstance(getContext());
+        mOpenHelper = MmsSmsDatabaseHelper.getMockInstance(getContext());
+	mMockOpenHelper = MmsSmsDatabaseHelper.getMockInstance(getContext());
         return true;
     }
 
@@ -68,6 +70,14 @@ public class MmsProvider extends ContentProvider {
     public Cursor query(Uri uri, String[] projection,
             String selection, String[] selectionArgs, String sortOrder) {
         SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
+	SQLiteDatabase db;
+
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.READ_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    Log.i(TAG, "Mocking");
+	    db = mMockOpenHelper.getReadableDatabase();
+	} else {
+	    db = mOpenHelper.getReadableDatabase();
+	}
 
         // Generate the body of the query.
         int match = sURLMatcher.match(uri);
@@ -199,7 +209,6 @@ public class MmsProvider extends ContentProvider {
             finalSortOrder = sortOrder;
         }
 
-        SQLiteDatabase db = mOpenHelper.getReadableDatabase();
         Cursor ret = qb.query(db, projection, selection,
                 selectionArgs, null, null, finalSortOrder);
 
@@ -218,6 +227,14 @@ public class MmsProvider extends ContentProvider {
 
     @Override
     public String getType(Uri uri) {
+	SQLiteDatabase db;
+
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.READ_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    db = mMockOpenHelper.getReadableDatabase();
+	} else {
+	    db = mOpenHelper.getReadableDatabase();
+	}
+
         int match = sURLMatcher.match(uri);
         switch (match) {
             case MMS_ALL:
@@ -233,7 +250,7 @@ public class MmsProvider extends ContentProvider {
             case MMS_OUTBOX_ID:
                 return VND_ANDROID_MMS;
             case MMS_PART_ID: {
-                Cursor cursor = mOpenHelper.getReadableDatabase().query(
+                Cursor cursor = db.query(
                         TABLE_PART, new String[] { Part.CONTENT_TYPE },
                         Part._ID + " = ?", new String[] { uri.getLastPathSegment() },
                         null, null, null);
@@ -262,6 +279,11 @@ public class MmsProvider extends ContentProvider {
 
     @Override
     public Uri insert(Uri uri, ContentValues values) {
+	
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.WRITE_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    return null;
+	}
+
         int msgBox = Mms.MESSAGE_BOX_ALL;
         boolean notify = true;
 
@@ -315,7 +337,8 @@ public class MmsProvider extends ContentProvider {
                 return null;
         }
 
-        SQLiteDatabase db = mOpenHelper.getWritableDatabase();
+        SQLiteDatabase db;
+	db = mOpenHelper.getReadableDatabase();
         ContentValues finalValues;
         Uri res = Mms.CONTENT_URI;
         long rowId;
@@ -496,6 +519,11 @@ public class MmsProvider extends ContentProvider {
     @Override
     public int delete(Uri uri, String selection,
             String[] selectionArgs) {
+
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.WRITE_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    return 1;
+	}
+
         int match = sURLMatcher.match(uri);
         if (LOCAL_LOGV) {
             Log.v(TAG, "Delete uri=" + uri + ", match=" + match);
@@ -550,7 +578,10 @@ public class MmsProvider extends ContentProvider {
         }
 
         String finalSelection = concatSelections(selection, extraSelection);
-        SQLiteDatabase db = mOpenHelper.getWritableDatabase();
+
+        SQLiteDatabase db; 
+	db = mOpenHelper.getReadableDatabase();
+
         int deletedRows = 0;
 
         if (TABLE_PDU.equals(table)) {
@@ -648,7 +679,12 @@ public class MmsProvider extends ContentProvider {
 
     @Override
     public int update(Uri uri, ContentValues values,
-            String selection, String[] selectionArgs) {
+		      String selection, String[] selectionArgs) {
+	
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.WRITE_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    return 1;
+	}
+
         int match = sURLMatcher.match(uri);
         if (LOCAL_LOGV) {
             Log.v(TAG, "Update uri=" + uri + ", match=" + match);
@@ -711,7 +747,11 @@ public class MmsProvider extends ContentProvider {
         }
 
         String finalSelection = concatSelections(selection, extraSelection);
-        SQLiteDatabase db = mOpenHelper.getWritableDatabase();
+
+	SQLiteDatabase db;
+
+	db = mOpenHelper.getReadableDatabase();
+
         int count = db.update(table, finalValues, finalSelection, selectionArgs);
         if (notify && (count > 0)) {
             notifyChange();
@@ -875,6 +915,7 @@ public class MmsProvider extends ContentProvider {
     }
 
     private SQLiteOpenHelper mOpenHelper;
+    private SQLiteOpenHelper mMockOpenHelper;
 
     private static String concatSelections(String selection1, String selection2) {
         if (TextUtils.isEmpty(selection1)) {
diff --git a/src/com/android/providers/telephony/MmsSmsDatabaseHelper.java b/src/com/android/providers/telephony/MmsSmsDatabaseHelper.java
index c26e855..b903093 100644
--- a/src/com/android/providers/telephony/MmsSmsDatabaseHelper.java
+++ b/src/com/android/providers/telephony/MmsSmsDatabaseHelper.java
@@ -27,6 +27,7 @@ import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
+import android.os.Binder;
 import android.provider.BaseColumns;
 import android.provider.Telephony;
 import android.provider.Telephony.Mms;
@@ -206,12 +207,18 @@ public class MmsSmsDatabaseHelper extends SQLiteOpenHelper {
                         " END";
 
     private static MmsSmsDatabaseHelper mInstance = null;
+    private static MmsSmsDatabaseHelper mMockInstance = null;
 
     static final String DATABASE_NAME = "mmssms.db";
+    static final String DATABASE_MOCK_NAME = "mmssms_mock.db";
     static final int DATABASE_VERSION = 53;
 
     private MmsSmsDatabaseHelper(Context context) {
-        super(context, DATABASE_NAME, null, DATABASE_VERSION);
+	this(context, DATABASE_NAME);
+    }
+
+    private MmsSmsDatabaseHelper(Context context, String dbName) {
+        super(context, dbName, null, DATABASE_VERSION);
     }
 
     /**
@@ -220,11 +227,18 @@ public class MmsSmsDatabaseHelper extends SQLiteOpenHelper {
      */
     /* package */ static synchronized MmsSmsDatabaseHelper getInstance(Context context) {
         if (mInstance == null) {
-            mInstance = new MmsSmsDatabaseHelper(context);
+            mInstance = new MmsSmsDatabaseHelper(context, DATABASE_NAME);
         }
         return mInstance;
     }
 
+    static synchronized MmsSmsDatabaseHelper getMockInstance(Context context) {
+	if (mMockInstance == null) {
+	    mMockInstance = new MmsSmsDatabaseHelper(context, DATABASE_MOCK_NAME);
+	}
+	return mMockInstance;
+    }
+
     public static void updateThread(SQLiteDatabase db, long thread_id) {
         if (thread_id < 0) {
             updateAllThreads(db, null, null);
diff --git a/src/com/android/providers/telephony/MmsSmsProvider.java b/src/com/android/providers/telephony/MmsSmsProvider.java
index 93668c1..632aa2b 100644
--- a/src/com/android/providers/telephony/MmsSmsProvider.java
+++ b/src/com/android/providers/telephony/MmsSmsProvider.java
@@ -27,6 +27,7 @@ import android.content.ContentProvider;
 import android.content.ContentValues;
 import android.content.Context;
 import android.content.UriMatcher;
+import android.content.pm.PackageManager;
 import android.database.Cursor;
 import android.database.DatabaseUtils;
 import android.database.sqlite.SQLiteDatabase;
@@ -241,12 +242,14 @@ public class MmsSmsProvider extends ContentProvider {
     }
 
     private SQLiteOpenHelper mOpenHelper;
+    private SQLiteOpenHelper mMockOpenHelper;
 
     private boolean mUseStrictPhoneNumberComparation;
 
     @Override
     public boolean onCreate() {
         mOpenHelper = MmsSmsDatabaseHelper.getInstance(getContext());
+	mMockOpenHelper = MmsSmsDatabaseHelper.getMockInstance(getContext());
         mUseStrictPhoneNumberComparation =
             getContext().getResources().getBoolean(
                     com.android.internal.R.bool.config_use_strict_phone_number_comparation);
@@ -256,7 +259,12 @@ public class MmsSmsProvider extends ContentProvider {
     @Override
     public Cursor query(Uri uri, String[] projection,
             String selection, String[] selectionArgs, String sortOrder) {
-        SQLiteDatabase db = mOpenHelper.getReadableDatabase();
+	SQLiteDatabase db;
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.READ_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    db = mMockOpenHelper.getReadableDatabase();
+	} else {
+	    db = mOpenHelper.getReadableDatabase();
+	}
         Cursor cursor = null;
 
         switch(URI_MATCHER.match(uri)) {
@@ -665,7 +673,15 @@ public class MmsSmsProvider extends ContentProvider {
      */
     private Cursor getSimpleConversations(String[] projection, String selection,
             String[] selectionArgs, String sortOrder) {
-        return mOpenHelper.getReadableDatabase().query("threads", projection,
+
+	SQLiteDatabase db;
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.WRITE_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    db = mMockOpenHelper.getReadableDatabase();
+	} else {
+	    db = mOpenHelper.getReadableDatabase();
+	}
+
+        return db.query("threads", projection,
                 selection, selectionArgs, null, null, " date DESC");
     }
 
@@ -718,7 +734,14 @@ public class MmsSmsProvider extends ContentProvider {
         String outerQuery = outerQueryBuilder.buildQuery(
                 projection, null, null, null, null, sortOrder, null);
 
-        return mOpenHelper.getReadableDatabase().rawQuery(outerQuery, EMPTY_STRING_ARRAY);
+	SQLiteDatabase db;
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.READ_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    db = mMockOpenHelper.getReadableDatabase();
+	} else {
+	    db = mOpenHelper.getReadableDatabase();
+	}
+
+        return db.rawQuery(outerQuery, EMPTY_STRING_ARRAY);
     }
 
     /**
@@ -783,7 +806,14 @@ public class MmsSmsProvider extends ContentProvider {
                 columns, null, null, "tid",
                 "normalized_date = MAX(normalized_date)", sortOrder, null);
 
-        return mOpenHelper.getReadableDatabase().rawQuery(outerQuery, EMPTY_STRING_ARRAY);
+	SQLiteDatabase db;
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.READ_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    db = mMockOpenHelper.getReadableDatabase();
+	} else {
+	    db = mOpenHelper.getReadableDatabase();
+	}
+
+        return db.rawQuery(outerQuery, EMPTY_STRING_ARRAY);
     }
 
     /**
@@ -827,7 +857,14 @@ public class MmsSmsProvider extends ContentProvider {
         String unionQuery = unionQueryBuilder.buildUnionQuery(
                 new String[] { mmsSubQuery, smsSubQuery }, null, "1");
 
-        Cursor cursor = mOpenHelper.getReadableDatabase().rawQuery(unionQuery, EMPTY_STRING_ARRAY);
+	SQLiteDatabase db;
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.READ_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    db = mMockOpenHelper.getReadableDatabase();
+	} else {
+	    db = mOpenHelper.getReadableDatabase();
+	}
+
+        Cursor cursor = db.rawQuery(unionQuery, EMPTY_STRING_ARRAY);
 
         if (DEBUG) {
             Log.v("MmsSmsProvider", "getFirstLockedMessage query: " + unionQuery);
@@ -845,7 +882,14 @@ public class MmsSmsProvider extends ContentProvider {
         String unionQuery = buildConversationQuery(
                 projection, selection, selectionArgs, sortOrder);
 
-        return mOpenHelper.getReadableDatabase().rawQuery(unionQuery, EMPTY_STRING_ARRAY);
+	SQLiteDatabase db;
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.READ_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    db = mMockOpenHelper.getReadableDatabase();
+	} else {
+	    db = mOpenHelper.getReadableDatabase();
+	}
+
+        return db.rawQuery(unionQuery, EMPTY_STRING_ARRAY);
     }
 
     /**
@@ -884,8 +928,15 @@ public class MmsSmsProvider extends ContentProvider {
                 selection, "thread_id = " + threadIdString);
         String unionQuery = buildConversationQuery(
                 projection, finalSelection, selectionArgs, sortOrder);
-
-        return mOpenHelper.getReadableDatabase().rawQuery(unionQuery, EMPTY_STRING_ARRAY);
+	
+	SQLiteDatabase db;
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.READ_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    db = mMockOpenHelper.getReadableDatabase();
+	} else {
+	    db = mOpenHelper.getReadableDatabase();
+	}
+
+        return db.rawQuery(unionQuery, EMPTY_STRING_ARRAY);
     }
 
     /**
@@ -949,7 +1000,15 @@ public class MmsSmsProvider extends ContentProvider {
         String unionQuery = unionQueryBuilder.buildUnionQuery(
                 new String[] { mmsSubQuery, smsSubQuery }, sortOrder, null);
 
-        return mOpenHelper.getReadableDatabase().rawQuery(unionQuery, EMPTY_STRING_ARRAY);
+	
+	SQLiteDatabase db;
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.READ_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    db = mMockOpenHelper.getReadableDatabase();
+	} else {
+	    db = mOpenHelper.getReadableDatabase();
+	}
+
+        return db.rawQuery(unionQuery, EMPTY_STRING_ARRAY);
     }
 
     /**
@@ -972,8 +1031,16 @@ public class MmsSmsProvider extends ContentProvider {
 
         queryBuilder.setDistinct(true);
         queryBuilder.setTables("threads");
+
+	SQLiteDatabase db;
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.READ_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    db = mMockOpenHelper.getReadableDatabase();
+	} else {
+	    db = mOpenHelper.getReadableDatabase();
+	}
+
         return queryBuilder.query(
-                mOpenHelper.getReadableDatabase(), columns, finalSelection,
+                db, columns, finalSelection,
                 selectionArgs, sortOrder, null, null);
     }
 
@@ -1044,7 +1111,14 @@ public class MmsSmsProvider extends ContentProvider {
         String outerQuery = outerQueryBuilder.buildQuery(
                 smsColumns, null, null, null, null, sortOrder, null);
 
-        return mOpenHelper.getReadableDatabase().rawQuery(outerQuery, EMPTY_STRING_ARRAY);
+	SQLiteDatabase db;
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.READ_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    db = mMockOpenHelper.getReadableDatabase();
+	} else {
+	    db = mOpenHelper.getReadableDatabase();
+	}
+
+        return db.rawQuery(outerQuery, EMPTY_STRING_ARRAY);
     }
 
     /**
@@ -1121,6 +1195,10 @@ public class MmsSmsProvider extends ContentProvider {
         Context context = getContext();
         int affectedRows = 0;
 
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.WRITE_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    return 1;
+	}
+
         switch(URI_MATCHER.match(uri)) {
             case URI_CONVERSATIONS_MESSAGES:
                 long threadId;
@@ -1180,6 +1258,11 @@ public class MmsSmsProvider extends ContentProvider {
             String selection, String[] selectionArgs) {
         SQLiteDatabase db = mOpenHelper.getWritableDatabase();
         int affectedRows = 0;
+
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.WRITE_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    return 1;
+	}
+
         switch(URI_MATCHER.match(uri)) {
             case URI_CONVERSATIONS_MESSAGES:
                 String threadIdString = uri.getPathSegments().get(1);
diff --git a/src/com/android/providers/telephony/SmsProvider.java b/src/com/android/providers/telephony/SmsProvider.java
index 57ac256..3ba183d 100644
--- a/src/com/android/providers/telephony/SmsProvider.java
+++ b/src/com/android/providers/telephony/SmsProvider.java
@@ -20,6 +20,7 @@ import android.content.ContentProvider;
 import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.content.UriMatcher;
+import android.content.pm.PackageManager;
 
 import android.database.Cursor;
 import android.database.DatabaseUtils;
@@ -84,6 +85,7 @@ public class SmsProvider extends ContentProvider {
     @Override
     public boolean onCreate() {
         mOpenHelper = MmsSmsDatabaseHelper.getInstance(getContext());
+	mMockOpenHelper = MmsSmsDatabaseHelper.getMockInstance(getContext());
         return true;
     }
 
@@ -220,7 +222,13 @@ public class SmsProvider extends ContentProvider {
             orderBy = Sms.DEFAULT_SORT_ORDER;
         }
 
-        SQLiteDatabase db = mOpenHelper.getReadableDatabase();
+	SQLiteDatabase db;
+	Log.i(TAG, "Reading sms");
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.READ_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    db = mMockOpenHelper.getReadableDatabase();
+	} else {
+	    db = mOpenHelper.getReadableDatabase();
+	}
         Cursor ret = qb.query(db, projectionIn, selection, selectionArgs,
                               null, null, orderBy);
 
@@ -337,6 +345,11 @@ public class SmsProvider extends ContentProvider {
 
     @Override
     public Uri insert(Uri url, ContentValues initialValues) {
+
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.WRITE_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    return null;
+	}
+
         ContentValues values;
         long rowID;
         int type = Sms.MESSAGE_TYPE_ALL;
@@ -400,8 +413,10 @@ public class SmsProvider extends ContentProvider {
                 return null;
         }
 
-        SQLiteDatabase db = mOpenHelper.getWritableDatabase();
+	SQLiteDatabase db;
 
+	db = mOpenHelper.getWritableDatabase();
+	
         if (table.equals(TABLE_SMS)) {
             boolean addDate = false;
             boolean addType = false;
@@ -522,6 +537,11 @@ public class SmsProvider extends ContentProvider {
     public int delete(Uri url, String where, String[] whereArgs) {
         int count;
         int match = sURLMatcher.match(url);
+	
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.WRITE_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    return 1;
+	}
+
         SQLiteDatabase db = mOpenHelper.getWritableDatabase();
         switch (match) {
             case SMS_ALL:
@@ -610,6 +630,10 @@ public class SmsProvider extends ContentProvider {
         String extraWhere = null;
         SQLiteDatabase db = mOpenHelper.getWritableDatabase();
 
+	if (getContext().checkCallingOrSelfMockPermission("android.permission.WRITE_SMS") == PackageManager.PERMISSION_MOCKED) {
+	    return 1;
+	}
+
         switch (sURLMatcher.match(url)) {
             case SMS_RAW_MESSAGE:
                 table = TABLE_RAW;
@@ -684,6 +708,7 @@ public class SmsProvider extends ContentProvider {
     }
 
     private SQLiteOpenHelper mOpenHelper;
+    private SQLiteOpenHelper mMockOpenHelper;
 
     private final static String TAG = "SmsProvider";
     private final static String VND_ANDROID_SMS = "vnd.android.cursor.item/sms";
-- 
1.7.0.4

